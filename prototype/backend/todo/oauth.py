import re 
import requests
import json
import logging
from .token import enctry, dectry

from django.contrib.auth.models import User
from oauth2_provider.models import AccessToken

def generate_github_access_token(github_client_id, github_client_secret,github_code):
    """
    create an access token to github Oauth2.
    :param github_client_id: client_id from https://github.com/settings/developers
    :param github_client_secret: client_secret from https://github.com/settings/developers
    :param code: code generated by client from http://github.com/login/oauth/authorize/
     :return: json data on user's api
    """
    auth_response = requests.post(
    'https://github.com/login/oauth/access_token/',
    data=json.dumps({
    'client_id': github_client_id,
    'client_secret': github_client_secret,
    'code': github_code
    }),
    headers={'content-type': 'application/json'}
    )
    token= re.search(r"access_token=([a-zA-Z0-9]+)", auth_response.content.decode('utf-8'))
    if token is None:
        raise PermissionError(auth_response)
        
    token_string = token.string;
    token_string = token_string.replace("access_token=","");
    arr = token_string.split("&");
    token_string = arr[0];
    print('token=',token)
    print(token_string);    
    print("Making GitHub API Request for Username")
    headers1 = {'Authorization': 'token %s' % token_string}
    r = requests.get("https://api.github.com/user", headers=headers1)
    #print(r);
    #print(r.content.decode('utf-8'));
    data = r.content.decode('utf-8')
    
    data = json.loads(data)
    Username = data['login']
    Userid = data['id']
    print(Username)
    print("Does logger work?");
    
    
    return token.group(1), Username, Userid

def get_user_from_token(django_auth_token):
    """
    Retrieve the user object given an access token
    :param django_auth_token: Oauthtoolkit access TOKEN
    :return: user object
    """
    print("In_User11111111111111111111111")
    Username = dectry(django_auth_token)
    print("In_User22222222222222222222222")
    
    try:
        user = User.objects.get(username=Username)
    except User.DoesNotExist:
        pwd = enctry(Username)
        print("In_User33333333333333333333333")
        User.objects.create_user(username=Username,password=pwd)
        print("creat user12314114141412")
        user = User.objects.get(Username)
        return user
    print("In_User33333333333333333333333")
        
    
    #return User.objects.get(id=AccessToken.objects.get(token=django_auth_token['access_token']).user_id)
